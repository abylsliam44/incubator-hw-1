import React, { useState, useEffect } from 'react';
import { useTheme } from './ThemeContext';
import './App.css';

function App() {
  const { theme, toggleTheme } = useTheme();

  const motivationalPhrases = [
    '–¢—ã –º–æ–ª–æ–¥–µ—Ü!',
    '–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!',
    '–í–ø–µ—Ä—ë–¥ –∫ —É—Å–ø–µ—Ö—É!',
    '–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!',
  ];

  const [name, setName] = useState(localStorage.getItem('name') || '');
  const [timer, setTimer] = useState(10);
  const [duration, setDuration] = useState(10);
  const [isRunning, setIsRunning] = useState(false);
  const [message, setMessage] = useState('');
  const [completedCounts, setCompletedCounts] = useState(
    JSON.parse(localStorage.getItem('completedCounts')) || {}
  );

  useEffect(() => {
    localStorage.setItem('name', name);
  }, [name]);

  useEffect(() => {
    let interval = null;

    if (isRunning) {
      interval = setInterval(() => {
        setTimer(prevTimer => {
          if (prevTimer <= 1) {
            clearInterval(interval);
            setIsRunning(false);
            const phrase =
              motivationalPhrases[
                Math.floor(Math.random() * motivationalPhrases.length)
              ];
            setMessage(`–¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è, ${name}! üéâ ${phrase}`);
            setCompletedCounts(prevCounts => {
              const newCounts = { ...prevCounts };
              newCounts[name] = (newCounts[name] || 0) + 1;
              localStorage.setItem(
                'completedCounts',
                JSON.stringify(newCounts)
              );
              return newCounts;
            });
            playSound();
            return 0;
          }
          return prevTimer - 1;
        });
      }, 1000);
    }

    return () => clearInterval(interval);
  }, [isRunning, name, motivationalPhrases]);

  const playSound = () => {
    const audio = new Audio(
      'https://www.soundjay.com/buttons/sounds/button-10.mp3'
    );
    audio.play();
  };

  const handleStart = () => {
    if (!name) {
      alert('–í–≤–µ–¥–∏—Ç–µ –∏–º—è!');
      return;
    }
    setIsRunning(true);
    setTimer(duration);
    setMessage('');
  };

  const handleReset = () => {
    setIsRunning(false);
    setTimer(duration);
    setMessage('');
    setName('');
    setCompletedCounts({});
    localStorage.removeItem('name');
    localStorage.removeItem('completedCounts');
  };

  const getCountForName = () => {
    return completedCounts[name] || 0;
  };

  return (
    <div className={`app ${theme}`}>
      <h1>–¢–∞–π–º–µ—Ä —Å –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π</h1>

      <button className="toggle-theme" onClick={toggleTheme}>
        –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É
      </button>

      <div className="controls">
        <input
          type="text"
          placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
          value={name}
          onChange={e => setName(e.target.value)}
          disabled={isRunning}
        />

        <label>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Ç–∞–π–º–µ—Ä–∞:</label>
        <select
          value={duration}
          onChange={e => setDuration(parseInt(e.target.value, 10))}
          disabled={isRunning}
        >
          <option value={10}>10 —Å–µ–∫—É–Ω–¥</option>
          <option value={20}>20 —Å–µ–∫—É–Ω–¥</option>
          <option value={30}>30 —Å–µ–∫—É–Ω–¥</option>
        </select>

        <button
          className="button-main"
          onClick={handleStart}
          disabled={isRunning || !name}
        >
          –°—Ç–∞—Ä—Ç —Ç–∞–π–º–µ—Ä–∞
        </button>
        <button className="button-main" onClick={handleReset}>
          –°–±—Ä–æ—Å
        </button>
      </div>

      {isRunning && timer > 0 && (
        <h2 className="timer-info">{`${name}, –æ—Å—Ç–∞–ª–æ—Å—å ${timer} —Å–µ–∫`}</h2>
      )}

      <div className="progress-bar">
        <div
          className="progress-bar-fill"
          style={{ width: `${((duration - timer) / duration) * 100}%` }}
        />
      </div>

      {message && <div className="message">{message}</div>}
      {name && (
        <h3 className="count-display">{`–¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω ${getCountForName()} —Ä–∞–∑(–∞)`}</h3>
      )}
    </div>
  );
}

export default App;
